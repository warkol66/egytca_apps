<?php
/** 
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [Tue Jul 18 18:52:56 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package mer 
 */
class FormPeer extends BaseFormPeer {

	/**
	 * Builds a recursive section/questions tree
	 *
	 * @param unknown_type $parent
	 * @param unknown_type $depth
	 * @return unknown
	 */
	function buildSectionTree($parent, $depth=0){
		if (!$parent){return array();}
		$ret = array(
			$parent->getId() => str_repeat(".",$depth).$parent->getTitle()	,
			'new-'.$parent->getId() => str_repeat(".",$depth+1)."##261,Nueva secciÃ³n dentro de## ".$parent->getTitle()
			);
		foreach ($parent->getChildSections() as $section){
			$ret += FormPeer::buildSectionTree($section,$depth+1);
		}
		return $ret;
	}

	/**
	 * Obtiene el arbol de secciones y preguntas.
	 *
	 * @return array Array con el arbol de preguntas
	 */
	function getSectionsTree($criteria = null) {
		if (!$criteria){
			$criteria = new Criteria();
		}
		$forms = FormPeer::doSelect($criteria);
		$data = array();
		$sections = array();
		foreach ($forms as $form){
			//$data[$form->getId()] = $form->smarty();
			$sectionsTmp = FormPeer::buildSectionTree($form->getRootSection(),-1);
			//array_shift($sectionsTmp);
			$sections += $sectionsTmp;
		}
		return $sections;
	}
	
  /**
  * Crea un form nuevo.
  *
  * @param string $name name del form
  * @param int $relationship relationship del form
  * @return boolean true si se creo el form correctamente, false sino
	*/
	function create($name,$relationship) {
    $formObj = new Form();
    $formObj->setName($name);
		$formObj->setRelationship($relationship);
    require_once("FormSectionPeer.php");
		$rootSectionId = FormSectionPeer::create("Section");
		$formObj->setRootSectionId($rootSectionId);
		$formObj->save();
		return true;
	}

  /**
  * Actualiza la informacion de un form.
  *
  * @param int $id id del form
  * @param string $name name del form
  * @param int $relationship relationship del form
  * @return boolean true si se actualizo la informacion correctamente, false sino
	*/
  function update($id,$name,$relationship) {
  	$formObj = FormPeer::retrieveByPK($id);
    $formObj->setname($name);
		$formObj->setrelationship($relationship);
		$formObj->save();
		return true;
  }

	/**
	* Elimina un form a partir de los valores de la clave.
	*
  * @param int $id id del form
	*	@return boolean true si se elimino correctamente el form, false sino
	*/
  function delete($id) {
  	$formObj = FormPeer::retrieveByPK($id);
    require_once("FormSectionPeer.php");
		FormSectionPeer::delete($formObj->getRootSectionId());
    $formObj->delete();
		return true;
  }

  /**
  * Obtiene la informacion de un form.
  *
  * @param int $id id del form
  * @return array Informacion del form
  */
  function get($id) {
		$formObj = FormPeer::retrieveByPK($id);
    return $formObj;
  }

  /**
  * Obtiene todos los forms.
	*
	*	@return array Informacion sobre todos los forms
  */
	function getAll() {
		$cond = new Criteria();
		$alls = FormPeer::doSelect($cond);
		return $alls;
  }

}
