<?php

/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [Tue Jul 18 18:52:56 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer 
 */
class FormSection extends BaseFormSection {
	/**
	 * Return all the descendant sections and questions
	 *
	 * @return array
	 */
	function getSectionsAndQuestions(){
		$ret = array();
		$ret['section'] = $this;
		$ret['questions'] = $this->getQuestions();
		$sections = $this->getChildSections();
		$ret['sections'] = array();
		if (is_array($sections)){
			foreach ($sections as $child){
				/**
			 * @var $child FormSection
			 */
				$ret['sections'][] = $child->getSectionsAndQuestions();
			}
		}
		return $ret;
	}
	/**
	 * Return an array with all the child sections
	 *
	 * @return array of FormSection
	 */
	function getChildSections(){
		$criteria = new Criteria();
		$criteria->add(formSectionPeer::PARENTSECTIONID ,$this->getId());
		$ret = formSectionPeer::doSelect($criteria);
		return $ret;
	}
	function getQuestionsOrder(){
		$criteria = new Criteria();
		$criteria->addAscendingOrderByColumn(QuestionPeer::POSITION);
		return $this->getQuestions($criteria);
	}
	function getAllQuestions() {
		$questions = array();
		$questions = $this->getQuestionsOrder();
		$childSections = $this->getChildSections();
		foreach ($childSections as $section) {
			$questions = array_merge($questions,$section->getAllQuestions());
		}
		return $questions;
	}
	function getCriteriaQuestionsForActor($actor){
		$criteria = new Criteria();
		$criteria->addAscendingOrderByColumn(QuestionPeer::POSITION);
		$criteria->add(actorActiveQuestionPeer::ACTORID , $actor->getId());
		$criteria->add(QuestionPeer::SECTIONID , $this->getId());
		return $criteria;		
	}
	function getCriteriaQuestionsForRelationship($actor1,$actor2){
		$criteria = new Criteria();
		$criteria->addAscendingOrderByColumn(QuestionPeer::POSITION);
		$criteria->add(RelationshipActiveQuestionPeer::ACTOR1ID , $actor1->getId());
		$criteria->add(RelationshipActiveQuestionPeer::ACTOR2ID , $actor2->getId());
		$criteria->add(QuestionPeer::SECTIONID , $this->getId());
		return $criteria;		
	}
	function doCountQuestionsForActor($actor){
		return count(ActorActiveQuestionPeer::doSelectJoinQuestion($this->getCriteriaQuestionsForActor($actor)));
	}	
	function doCountQuestionsForRelationship($actor1,$actor2){
		return count(RelationshipActiveQuestionPeer::doSelectJoinQuestion($this->getCriteriaQuestionsForRelationship($actor1,$actor2)));
	}
	function getQuestionsForActor($actor){
		$criteria = $this->getCriteriaQuestionsForActor($actor);
		$ret = array();
		foreach (actorActiveQuestionPeer::doSelectJoinQuestion($criteria) as $activeQuestion) {
			$ret[] = $activeQuestion->getQuestion();
		}
		return $ret;
	}
	function getQuestionsForRelationship($actor1,$actor2){
		$criteria = $this->getCriteriaQuestionsForRelationship($actor1,$actor2);
		$ret = array();
		foreach (RelationshipActiveQuestionPeer::doSelectJoinQuestion($criteria) as $activeQuestion) {
			$ret[] = $activeQuestion->getQuestion();
		}
		return $ret;
	}
	function doSelectQuestionsJoinAnswer($actor){
		$c = new Criteria();
		$c->add(QuestionPeer::SECTIONID ,$this->GetId());
		$c->add(AnswerPeer::ACTORID , $actor->getId());
		return AnswerPeer::doSelectJoinQuestion($c);
	}
	
	function doSelectQuestions(){
		$c = new Criteria();
		$c->add(QuestionPeer::SECTIONID ,$this->GetId());
		return QuestionPeer::doSelect($c);
	}

}
