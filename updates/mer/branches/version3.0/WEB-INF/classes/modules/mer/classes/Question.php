<?php

/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [Tue Jul 18 18:52:56 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer 
 */

define("QUESTION_TYPE_STRING",1);
define("QUESTION_TYPE_TEXT",2);
define("QUESTION_TYPE_OPTIONS",3);
define("QUESTION_TYPE_DATE",4);
define("QUESTION_TYPE_MONEY",5);
define("QUESTION_TYPE_NUMBER",6);
define("QUESTION_TYPE_BOOLEAN",7);

class Question extends BaseQuestion {


	function __toString(){
		return $this->getQuestion();
	}

	/**
	 * Return the relationship values between actor 1 and actor 2
	 *
	 * @param actor $actor1
	 * @param actor $actor2
	 * @return array array($current,$potential)
	 */
	function getRelationshipValues($actor1,$actor2){
		$answerC = new Criteria();
		$answerC->add(RelationshipPeer::QUESTIONID , $this->getId());
		$answerC->add(RelationshipPeer::ACTOR1ID,$actor1->getId());
		$answerC->add(relationshipPeer::ACTOR2ID ,$actor2->getId());
		$answerC->setLimit(1);
		/**
		 * @var $answerO Relationship
		 */
		$answerO = RelationshipPeer::doSelect($answerC);		
		if (!$answerO){			
			$current = '';
			$potential = '';
		}else{
			$answerO = array_shift($answerO);
			$current = ($answerO->getCurrent() ) ? $answerO->getCurrent() : '';
			$potential = ($answerO->getPotential() ) ? $answerO->getPotential() : '';
		}
		return array($current,$potential);		
	}
	/**
	 * Return the HTML to draw the relationship in HTML
	 *
	 * @param Actor $actor1
	 * @param Actor $actor2
	 */
	function RelationshipToHTML($actor1,$actor2){
		list($current,$potential) = $this->getRelationshipValues($actor1,$actor2);
		
		$elementName1 = "answer[".$this->getId()."][0]";
		$elementName2 = "answer[".$this->getId()."][1]";
		switch($this->getType()){
			case QUESTION_TYPE_OPTIONS:
				$options = $this->getOptions();
				$html = "Real:".HTMLSelect($this->getId(),$current,$options,$elementName1);
				$html .= "Potencial:".HTMLSelect($this->getId(),$potential,$options,$elementName2);
			break;
			case QUESTION_TYPE_TEXT:
				$html = "Real:".HTMLTextarea($this->getId(),$current,$elementName1);
				$html .= HTMLTextarea($this->getId(),$potential,$elementName2);
			break;
			default:
			case QUESTION_TYPE_TEXT:
				$html = "Real:".HTMLText($this->getId(),$current,$elementName1);
				$html .= "<br />Potencial:".HTMLText($this->getId(),$potential,$elementName2);
			break;		
		}
		return $html;
	}
	function appliesTo($actor){
		$cActor = new Criteria();
		$cActor->add(ActorActiveQuestionPeer::ACTORID ,$actor->getId());
		return $this->getActorActiveQuestions($cActor);
	}

	function appliesToRelationship($actor1,$actor2){
		$cActor = new Criteria();
		$cActor->add(RelationshipActiveQuestionPeer::ACTOR1ID ,$actor1->getId());
		$cActor->add(RelationshipActiveQuestionPeer::ACTOR2ID ,$actor2->getId());
		return $this->getRelationshipActiveQuestions($cActor);
	}

	/**
	 * Return the names of the defined question types
	 *
	 * @return array
	 */
	function getTypes(){
		$ret = array();
		foreach (get_defined_constants() as $name=>$value){
			if (substr($name,0,14) == 'QUESTION_TYPE_')	{
				$ret[$value] = ucfirst(strtolower(substr($name,14)));
			}
		}
		return QuestionPeer::$questionTypes;//$ret;
	}
	
	function getAnswerText($actor) {
		if ($actor){
			$answerO = $this->getAnswer($actor);
			if ($answerO){
				$answerO = $answerO[0];
				$answer = $answerO->getAnswer();
//				$answer = htmlentities($answerO->getAnswer(), ENT_QUOTES);
			}
		}
		return $answer;
	}
	
	function getAnswer($actor) {
		if ($actor){
			$actorC = new Criteria();
			$actorC->add(AnswerPeer::ACTORID  , $actor->getId());
			$actorC->add(AnswerPeer::QUESTIONID  , $this->getId());
			$actorC->setLimit(1);
			$answerO = AnswerPeer::doSelect($actorC);
		}
		return $answerO[0];
	}
	


	function toHTML($actor = null){
		if ($actor){
			$actorC = new Criteria();
			$actorC->add(AnswerPeer::ACTORID  , $actor->getId());			
			$actorC->add(AnswerPeer::QUESTIONID  , $this->getId());			
			$actorC->setLimit(1);
			$answerO = AnswerPeer::doSelect($actorC);
			if ($answerO){
				$answerO = $answerO[0];
				$answer = $answerO->getAnswer();
//				$answer = htmlentities($answerO->getAnswer(), ENT_QUOTES);
			}
		}		
		switch ($this->getType()){
			case QUESTION_TYPE_OPTIONS:
				$options = $this->getOptions();
				$html = HTMLSelect($this->getId(),$answer,$options);
			break;
			case QUESTION_TYPE_TEXT:
				$html = HTMLTextarea($this->getId(),$answer);
			break;
			case QUESTION_TYPE_BOOLEAN:
				$html = HTMLBoolean($this->getId(),$answer);
			break;			
			default:
			case QUESTION_TYPE_TEXT:
				$html = HTMLText($this->getId(),$answer);
			break;			
		}
		return $html . " <span class='units'>".$this->getUnit()."</span>";
	}

	/**
	 * Return the options asociated with this question
	 *
	 * @param int $minOptions pad the results up to $minOptions options
	 * @return array of questionOption
	 */
	function getOptions($minItems=0){
		$c = new Criteria();
		$c->add(QuestionOptionPeer::QUESTIONID,$this->getId());
		$c->addAscendingOrderByColumn(QuestionOptionPeer::POSITION );
		$options = QuestionOptionPeer::doSelect($c);
		if ($minItems){
			if (count($options) < $minItems){
				for ($i=count($options); $i<$minItems; $i++){
					$options[] = new QuestionOption();
				}
			}
		}		
		return $options;
	}
	/**
	 * Replace options for this question
	 *
	 * @param array $keys Array of keys ie: array('opc1','opc2')
	 * @param array $text array of values ie: array('Option 1', 'Option 2')
	 */
	function replaceOptions($keys,$text,$default = false){
		if ($this->getId()){
			$c = new Criteria();
			$c->add(questionOptionPeer::QUESTIONID ,$this->getId());
			questionOptionPeer::doDelete($c);
		}
		$order = 0;
		foreach ($keys as $i=>$key){			
			if ($keys[$i] !== '' && !empty($text[$i])){
				$questionOption = new QuestionOption();
				$questionOption->setValue($keys[$i]);
				$questionOption->setText($text[$i]);
				$questionOption->setquestion($this);
				$questionOption->setPosition(++$order);
				if ($default === $i){
					$questionOption->setDefaultOpc(1);
				}else {
					$questionOption->setDefaultOpc(0);
				}				
				$questionOption->save();
			}
		}

	}
}
function HTMLSelect($id,$answer,$options, $name=null){
	$name = ($name) ? $name : 'answer['.$id.']';
	$html = '<select name="'.$name.'" id="q_'.$id.'" />';
	$html.="<option value=''>##300,Seleccione##</option>\n";
	$isDefault = false;
	foreach ($options as $k=>$option){
		if (is_object($option)){
			$value = $option->getValue();
			$text = $option->getText();
			$isDefault = $option->getDefaultOpc();
		}else {
			$value = $k;
			$text = $option;
		}
		/**
		 * @var $option questionOption;
		 */			
		if ($answer != null){		
			$selected = ($value != $answer)  ? '' : "selected='selected'";
		}elseif( $isDefault){
			$selected = "selected='selected'";
		}else {
			$selected = '';
		}
		$html.="<option value='$value' $selected>".$text."</option>\n";
	}
	$html.='</select>';
	return $html;
}
function HTMLTextarea($id,$answer, $name=null){
	$name = ($name) ? $name : 'answer['.$id.']';
	$html = '<textarea name="'.$name.'" id="q_'.$id.'" cols="35" rows="4" wrap="virtual" />'.$answer.'</textarea>';
	return $html;
}
function HTMLText($id,$answer, $name=null){
	$name = ($name) ? $name : 'answer['.$id.']';
	$html = '<input type="text" name="'.$name.'" value="'.$answer.'" id="q_'.$id.'" />';
	return $html;
}
function HTMLBoolean($id,$answer,$name=null){
	$options = array("1"=>"##258,Si##","0"=>"##259,No##",""=>'##260,N/A##');
	return HTMLSelect($id,$answer,$options,$name);
}

