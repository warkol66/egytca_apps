<?php

/** 
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [08/16/06 22:43:13]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package mer 
 */
class GraphModelPeer extends BaseGraphModelPeer {

  /**
  * Crea un grafico.
  *
  * @param string $name Nombre del grafico
  * @param int $actors Cantidad de actores involucrados en el grafico
	* @param string $labelX Etiqueta del eje X
	* @param string $labelY Etiqueta del eje Y
	* @param string $labelZ Etiqueta del eje Z
	* @param int $typeX Tipo del eje X
	* @param int $typeY Tipo del eje Y
	* @param int $typeZ Tipo del eje Z
	* @return boolean true si se creo correctamente, false sino
	*/
	function create($name,$type,$actors,$labelX,$labelY,$labelZ,$typeX,$typeY,$typeZ) {
		$graphModel = new GraphModel();
		$graphModel->setName($name);
		$graphModel->setType($type);
		$graphModel->setActors($actors);
		$graphModel->setLabelX($labelX);
		$graphModel->setLabelY($labelY);
		$graphModel->setLabelZ($labelZ);
		$graphModel->setTypeX($typeX);
		$graphModel->setTypeY($typeY);
		$graphModel->setTypeZ($typeZ);
		$graphModel->save();
		for ($i=1; $i<5; $i++) {
			$graphModelJudgement = new GraphModelJudgement();
      $graphModelJudgement->setGraphId($graphModel->getId());
      $graphModelJudgement->setQuadrant($i);
      $graphModelJudgement->save();
		}
		return $graphModel;
	}
	
  /**
  * Crea un grafico.
  *
  * @param string $name Nombre del grafico
  * @param int $actors Cantidad de actores involucrados en el grafico
	* @return boolean true si se creo correctamente, false sino
	*/
	function createSimple($name,$type,$actors) {
		$graphModel = new GraphModel();
		$graphModel->setName($name);
		$graphModel->setType($type);
		$graphModel->setActors($actors);
		$graphModel->setTypeX(10);
		$graphModel->save();
		return $graphModel;
	}

  /**
  * Actualiza la informacion de un grafico.
  *
  * @param int $id Id del grafico
  * @param string $name Nombre del grafico
  * @param int $actors Cantidad de actores involucrados en el grafico
	* @param string $labelX Etiqueta del eje X
	* @param string $labelY Etiqueta del eje Y
	* @param string $labelZ Etiqueta del eje Z
	* @param int $typeX Tipo del eje X
	* @param int $typeY Tipo del eje Y
	* @param int $typeZ Tipo del eje Z
	* @return boolean true si se actualizo la informacion correctamente, false sino
	*/
	function update($id,$name,$type,$actors,$labelX,$labelY,$labelZ,$typeX,$typeY,$typeZ) {
		$graphModel = GraphModelPeer::retrieveByPK($id);
		$graphModel->setName($name);
		$graphModel->setType($type);
		$graphModel->setActors($actors);
		$graphModel->setLabelX($labelX);
		$graphModel->setLabelY($labelY);
		$graphModel->setLabelZ($labelZ);
		$graphModel->setTypeX($typeX);
		$graphModel->setTypeY($typeY);
		$graphModel->setTypeZ($typeZ);
		$graphModel->save();
		return $graphModel;
	}
	
  /**
  * Actualiza la informacion de un grafico.
  *
  * @param int $id Id del grafico
  * @param string $name Nombre del grafico
  * @param int $actors Cantidad de actores involucrados en el grafico
	* @return boolean true si se actualizo la informacion correctamente, false sino
	*/
	function updateSimple($id,$name,$type,$actors) {
		$graphModel = GraphModelPeer::retrieveByPK($id);
		$graphModel->setName($name);
		$graphModel->setType($type);
		$graphModel->setActors($actors);
		$graphModel->setTypeX(10);
		$graphModel->save();
		return $graphModel;
	}

  /**
  * Obtiene la informacion de un grafico.
  *
  * @param int $id Id del grafico
  * @return array Informacion del grafico
  */
	function get($id) {
  	$graphModel = GraphModelPeer::retrieveByPK($id);
  	return $graphModel;
	}
	
  /**
  * Elimina un grafico.
  *
  * @param int $id Id del grafico
  * @return true
  */
	function delete($id) {
  	$graphModel = GraphModelPeer::retrieveByPK($id);
  	$graphModel->delete();
  	return true;
	}
	
  /**
  * Obtiene todas los graficos.
	*
	*	@return array Informacion sobre todos los graficos
  */
	function getAll() {
		$cond = new Criteria();
		$todosObj = GraphModelPeer::doSelect($cond);
		return $todosObj;
  }
  
  /**
  * Obtiene todos los graficos para un actor.
	*
	*	@param int $actor Id de actor
	*	@return array Informacion sobre los graficos
  */
	function getAllByActor($actor) {
		$category = ActorPeer::get($actor)->getCategoryId();
		$cond = new Criteria();
		$todosObj = GraphModelPeer::doSelect($cond);
		for ($i=0; $i<count($todosObj); $i++) {
			if ($todosObj[$i]->getActors() == 0) {
				//Es un grafico para toda la categoria
				$condCategory = new Criteria();
				$condCategory->add(GraphCategoryPeer::GRAPHID, $todosObj[$i]->getId());
				$condCategory->add(GraphCategoryPeer::CATEGORYID, $category);
				$graphsCategory = GraphCategoryPeer::doSelect($condCategory);
				if ( count($graphsCategory) > 0 ) {
					$todosObj[$i]->judgement = $graphsCategory[0]->getJudgement();
          $todosObj[$i]->oldJudgement = $graphsCategory[0]->getOld();
				}
			}	else {
				//Es un grafico para un solo actor
				$condActor = new Criteria();
				$condActor->add(GraphActorPeer::GRAPHID, $todosObj[$i]->getId());
				$condActor->add(GraphActorPeer::ACTORID, $actor);
				$graphsActor = GraphActorPeer::doSelect($condActor);
				if ( count($graphsActor) > 0 ) {
					$todosObj[$i]->judgement = $graphsActor[0]->getJudgement();
					$todosObj[$i]->oldJudgement = $graphsActor[0]->getOld();
				}	
			}
		}
		return $todosObj;
  }
  
	function getColors() {
		return Array("gold","lime","yellow","aqua","coral","violet","green","blue",
								 "orangered","maroon","purple","sienna","turquoise","peachpuff",
								 "gray","navy","red","chocolate","darkgreen","salmon","black");
	}  
}
