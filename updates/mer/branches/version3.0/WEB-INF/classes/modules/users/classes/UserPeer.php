<?php

/** 
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [07/25/06 16:04:22]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package mer 
 */
class UserPeer extends BaseUserPeer {

  /**
  * Obtiene todos los usuarios.
	*
	*	@return array Informacion sobre todos los usuarios
  */
	function getAll() {
		$cond = new Criteria();
		$cond->add(UserPeer::ACTIVE, 1);
		$cond->addJoin(UserPeer::ID, UserInfoPeer::USERID);
		$todosObj = UserPeer::doSelect($cond);
		return $todosObj;
  }
  
  /**
  * Obtiene todos los usuarios desactivados.
	*
	*	@return array Informacion sobre los usuarios
  */
	function getDeleteds() {
		$cond = new Criteria();
		$cond->addJoin(UserPeer::ID, UserInfoPeer::USERID);
		$todosObj = UserPeer::doSelect($cond);
		return $todosObj;
  }

  /**
  * Crea un usuario nuevo.
  *
  * @param string $username Nombre de usuario
  * @param string $name Nombre del usuario
  * @param string $surname Apellido del usuario
  * @param string $pass Contraseña del usuario
  * @param int $levelId Id del nivel de usuarios
  * @return boolean true si se creo el usuario correctamente, false sino
	*/
  function create($username,$name,$surname,$pass,$levelId) {
		$user = new User();
		$user->setUsername($username);
		$user->setPassword(md5($pass."ASD"));
		$user->setCreated(time());
		$user->setUpdated(time());
		$user->setLevelId($levelId);		
		$user->setActive(1);
		$user->save();
		$userInfo = new UserInfo();
		$userInfo->setUserId($user->getId());
		$userInfo->setName($name);
		$userInfo->setSurname($surname);
		$userInfo->save();
		return true;
  }
  
  /**
  * Obtiene la informacion de un usuario.
  *
  * @param int $id Id del usuario
  * @return array Informacion del usuario
  */
  function get($id) {
		$cond = new Criteria();
		$cond->add(UserPeer::ID, $id);
		$cond->addJoin(UserPeer::ID, UserInfoPeer::USERID);
		$todosObj = UserPeer::doSelect($cond);
		return $todosObj[0];
  }
  
  /**
  * Obtiene los grupos de usuarios en los cuales es miembro un usuario.
  *
  * @param int $id Id del usuario
  * @return array Grupos de Usuarios
  */
  function getGroupsByUser($id) {
		$cond = new Criteria();
		$cond->add(UserGroupPeer::USERID, $id);
		$todosObj = UserGroupPeer::doSelectJoinGroup($cond);
		return $todosObj;
  }
  
  /**
  * Agrega un usuario a un grupo de usuarios.
  *
  * @param int $user Id del usuario
  * @param int $group Id del grupo de usuarios
  * @return boolean true si se agrego correctamente, false sino
  */
	function addUserToGroup($user,$group) {
		try {
			$userGroup = new UserGroup();
			$userGroup->setUserId($user);
			$userGroup->setGroupId($group);
			$userGroup->save();
			return true;
		}
		catch (PropelException $e) {
			return false;
		}
	}
	
  /**
  * Elimina un usuario de un grupo de usuarios.
  *
  * @param int $user Id del usuario
  * @param int $group Id del grupo de usuarios
  * @return boolean true si se elimino correctamente, false sino
  */
	function removeUserFromGroup($user,$group) {
		try {
			$cond = new Criteria();
			$cond->add(UserGroupPeer::USERID, $user);
			$cond->add(UserGroupPeer::GROUPID, $group);
			$todosObj = UserGroupPeer::doSelect($cond);
			$obj = $todosObj[0];
			$obj->delete();
			return true;
		}
		catch (PropelException $e) {
			return false;
		}
	}

  /**
  * Actualiza la informacion de un usuario.
  *
  * @param int $id Id del usuario
  * @param string $username Nombre de usuario
  * @param string $name Nombre del usuario
  * @param string $surname Apellido del usuario
  * @param string $pass Contraseña del usuario
  * @param int $levelId Id del nivel de usuarios
  * @return boolean true si se actualizo la informacion correctamente, false sino
	*/
  function update($id,$username,$name,$surname,$pass,$levelId) {
		try {
			$user = UserPeer::retrieveByPK($id);
			$user->setUsername($username);
			$user->setUpdated(time());
			$user->setLevelId($levelId);
			if ( !empty($pass) )
				$user->setPassword(md5($pass."ASD"));
			$user->save();
			$userInfo = UserInfoPeer::retrieveByPK($id);
			$userInfo->setName($name);
			$userInfo->setSurname($surname);
			$userInfo->save();
			return true;
		}
		catch (PropelException $e) {
			return false;
		}
  }

	/**
	* Elimina un usuario a partir del id.
	*
  * @param int $id Id del usuario
	*	@return boolean true si se elimino correctamente el usuario, false sino
	*/
  function delete($id) {
		$user = UserPeer::retrieveByPk($id);
		$user->setActive(0);
		$user->save();
		return true;
  }
  
	/**
	* Activa un usuario a partir del id.
	*
  * @param int $id Id del usuario
	*	@return boolean true si se activo correctamente al usuario, false sino
	*/
  function activate($id) {
		$user = UserPeer::retrieveByPk($id);
		$user->setActive(1);
		$user->save();
		return true;
  }

	/**
	* Autentica a un usuario.
	*
	* @param string $username Nombre de usuario
	* @param string $password Contraseña 
	* @return User Informacion sobre el usuario, false si no fue exitosa la autenticacion
	*/
  function auth($username,$password) {
		$cond = new Criteria();
		$cond->add(UserPeer::USERNAME, $username);
		$cond->add(UserPeer::ACTIVE, "1");
//		$todosObj = UserPeer::doSelectJoinUserInfo($cond);
//		$user = $todosObj[0];
		$user = UserPeer::doSelectOne($cond);
		if ( !empty($user) ) {
			if ( $user->getPassword() == md5($password."ASD") ) {
				return $user;
			}
		}
		return false;
  }

}
