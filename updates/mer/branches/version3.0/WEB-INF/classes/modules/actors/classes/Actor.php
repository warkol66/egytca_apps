<?php
/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [Tue Jul 18 18:52:56 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package mer 
 */
class Actor extends BaseActor {

	function __toString(){
		return $this->getName();
	}

	function replaceAnswers($answers){

		GraphActorPeer::setOldByActor($this);
		GraphCategoryPeer::setOldByCategory($this->getCategory());
		foreach ($answers as $questionId => $answer){
			$answerO = AnswerPeer::getAnswerByActorAndQuestion($this->getId(),$questionId);
			if (empty($answerO))
				$answerO = new Answer();
			$answerO->setQuestionid($questionId);
			$answerO->setAnswer($answer);
			$answerO->setActor($this);
			$answerO->setOld(1);
			$answerO->save();
		}
	}
	
	function replaceActive($applyableQuestions,$form) {
		$questions = $form->getAllQuestions();

		foreach ($questions as $question) {

			if (in_array($question->getId(),$applyableQuestions)) {
				$actQuestion = ActorActiveQuestionQuery::create()->findPK(array($question->getId(),$this->getId()));
				if (empty($actQuestion)) {
					$actQuestion = new ActorActiveQuestion();
					$actQuestion->setActorId($this->getId());
					$actQuestion->setQuestionId($question->getId());
					$actQuestion->save();
				}
			}
			else
        ActorActiveQuestionPeer::delete($this,$question);
		}
	}
	
	function getAnswerByQuestionLabel($label) {
		$question = QuestionPeer::getByLabel($label);
		if ($question)
			return $question->getAnswer($this);
		return false;
	}
	
	function getNumericAnswerByLabel($label) {
		$answer = $this->getAnswerByQuestionLabel($label);
		if ($answer) {
    	$answerText = $answer->getAnswer();
    	if (empty($answerText) or !is_numeric($answerText))
    		return 0;
    	else
    		return $answerText;
		}
		return 0;
	}
	
	function getRelation($actor,$questionId) {
		$criteria = new Criteria();
		$criteria->add(RelationshipPeer::ACTOR1ID, $this->getId());
		$criteria->add(RelationshipPeer::ACTOR2ID, $actor->getId());
		$criteria->add(RelationshipPeer::QUESTIONID, $questionId);
    $relationships = RelationshipPeer::doSelectJoinQuestion($criteria);
    return $relationships[0];
	}

}
