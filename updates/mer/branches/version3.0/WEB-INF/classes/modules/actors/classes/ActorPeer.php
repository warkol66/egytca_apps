<?php

/**
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [07/10/06 19:14:59]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package mer
 */
class ActorPeer extends BaseActorPeer {

	/**
	* Agrega un actor.
	*
	* @param string $name Nombre del actor
	* @return void
	*/
	function add($name) {
		$actor = new Actor();
		$actor->setName($name);
		$actor->setActive(1);
		$actor->save();
		return;
	}

	/**
	* Agrega un actor con una categoria.
	*
	* @param string $name Nombre del actor
	* @param int $category Id de la categoria
	* @return void
	*/
	function addWithCategory($name,$category) {
		$actor = new Actor();
		$actor->setName($name);
		$actor->setCategoryId($category);
		$actor->setActive(1);
		$actor->save();
		return;
	}

	/**
	* Guarda un actor con una categoria.
	*
	* @param int $id Id del actor
	* @param string $name Nombre del actor
	* @param int $category Id de la categoria
	* @return void
	*/
	function saveWithCategory($id,$name,$category) {
		$actor = ActorPeer::retrieveByPK($id);
		$actor->setName($name);
		$actor->setCategoryId($category);
		$actor->save();
		return;
	}

	/**
	* Obtiene todos los actores asociados a una categoria.
	*
	* @param int $category Id de la categoria
	* @return array Actores
	*/
	function getByCategory($category) {
		$cond = new Criteria();
		$cond->add(ActorPeer::CATEGORYID, $category);
		$cond->add(ActorPeer::ACTIVE, 1);
		$objs = ActorPeer::doSelect($cond);
		return $objs;
	}

	/**
	* Obtiene todos los actores.
	*
	* @return array Actores
	*/
	function getAll() {
		$cond = new Criteria();
		$cond->add(ActorPeer::ACTIVE, 1);
		$objs = ActorPeer::doSelect($cond);
		return $objs;
	}

	/**
	* Obtiene todos los actores sin una categoria asociada.
	*
	* @return array Actores
	*/
	function getActorsWithNoCategory() {
		$actors = ActorQuery::create()
								->filterByActive(1)
								->filterByCategoryid(array('max' => 0))
								->find();
							return $actors;
	}

	/**
	* Actualiza la categoria a un actor.
	*
	* @param string $actor Nombre del actor
	* @param int $category Id de la categoria
	* @return void
	*/
	function setCategoryToActor($actor,$category) {
		$obj = ActorPeer::retrieveByPK($actor);
		$obj->setCategoryId($category);
		$obj->save();
		return;
	}

 /**
	* Obtiene un actor.
	*
	* @param int $id Id del actor
	* @return Actor Actor
	*/
	function get($id) {
		$obj = ActorPeer::retrieveByPK($id);
		return $obj;
	}

 /**
	* Elimina un actor.
	*
	* @param int $id Id del actor
	* @return void
	*/
	function delete($id) {
		$actor = ActorPeer::retrieveByPk($id);
		if ( !empty($actor) ) {
			$actor->setActive(0);
			$actor->save();
		}
		return;
	}

 /**
	* Return an array with all the actors this user can access
	*
	* @param User $user
	* @return array of Actor
	*/
	function getUserActors($user){

		$groups = UserGroupQuery::create()->select('Groupid')->findByUser($user);
		$categoryAllowed = GroupCategoryQuery::create()->select('Categoryid')->filterByGroupid($groups, CRITERIA::IN)->find();
		$actors = ActorQuery::create()->filterByCategoryid($categoryAllowed, CRITERIA::IN)->find();
		return $actors;

	}

 /**
	* Return an array with the principal actors by category
	*
	* @param Category $category
	* @return array of Actor
	*/
	function getPrincipalActors($category) {

		$hierarchyPeer = new HierarchyPeer();
		$hierarchies = $hierarchyPeer->getByCategory($category);
		$principalActors = array();

		foreach ($hierarchies as $hierarchy)
			$principalActors[] = $hierarchy->getActor();

		return $principalActors;

	}

}
