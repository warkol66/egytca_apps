<?php

/**
 * Skeleton subclass for performing query and update operations on the 'catalog_affiliateProduct' table.
 *
 * Precios de Productos por Afiliado
 *
 * This class was autogenerated by Propel on:
 *
 * Wed Oct 17 15:16:48 2007
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class AffiliateProductPeer extends BaseAffiliateProductPeer {

	/**
	 * Agrega un precio diferencial para un producto para un cierto afiliado
	 * @param affiliateId integer id del afiliado
	 * @param productCode integer codigo del producto
	 * @param price double precio diferencial
	 */
	function add($affiliateId,$productCode,$price) {		
		
		//regla de negocio, no se dan de alta aquellos cuyo precio sea cero.
		if ($price == 0) {
			return false;
		}

		//si el producto no existe, no darlo de alta
		$product = ProductPeer::getByCodeModified($productCode);
		if (empty($product)) {
			return false;
		}
		
		$affiliateProduct = new AffiliateProduct();		
		$affiliateProduct->setAffiliateId($affiliateId);
		$affiliateProduct->setProductId($product->getId());
		$affiliateProduct->setPrice($price);
		try {
			$affiliateProduct->save();
		}
		catch (Exception $e) {
			return false;
		}
		
		return true;
	}
	
	/**
	 * Elimina todos los precios diferenciales para un cierto afiliado
	 * 
	 * @param affiliateId integer id del afiliado
	 */
	function deletePrices($affiliateId) {
		
		$cond = new Criteria();
		$cond->add(AffiliateProductPeer::AFFILIATEID,$affiliateId);
		try {
			AffiliateProductPeer::doDelete($cond);
		}
		catch (Exception $e) {
			return false;
		}
		return true;
			
	}
	
	/**
	 * Indica si un afiliado tiene una lista especial de precios
	 */
	function affiliateHasPriceList($affiliateId) {
	
		$cond = new Criteria();
		$cond->add(AffiliateProductPeer::AFFILIATEID,$affiliateId);
		
		$result = AffiliateProductPeer::doSelect($cond);
		if (count($result) > 0)
			return true;
		return false;
		
	}
	
	function get($affiliateId,$productId) {
		$affiliateProduct = AffiliateProductPeer::retrieveByPK($productId,$affiliateId);
		return $affiliateProduct;		
	}


} // AffiliateProductPeer
