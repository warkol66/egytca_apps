<?php

  // include base peer class
  require_once 'import/classes/om/BaseSupplierQuoteItemPeer.php';

  // include object class
  include_once 'import/classes/SupplierQuoteItem.php';


/**
 * Skeleton subclass for performing query and update operations on the 'import_supplierQuoteItem' table.
 *
 * Elemento de Cotizacion de Proveedor
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class SupplierQuoteItemPeer extends BaseSupplierQuoteItemPeer {
	
  /**
  * Actualiza la informacion de un supplier quote item dado.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return boolean true si se actualizo la informacion correctamente, false sino
  */  
  function update($params) {
    try {
      $supplierquoteItemObj = SupplierQuoteItemPeer::retrieveByPK($params["id"]);    
      if (empty($supplierquoteItemObj))
        throw new Exception();
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($supplierquoteItemObj,$setMethod) ) {          
          if (!empty($value))
            $supplierquoteItemObj->$setMethod($value);
          else
            $supplierquoteItemObj->$setMethod(null);
        }
      }
	  $supplierquoteItemObj->setStatus(SupplierQuoteItem::STATUS_QUOTED);

	  require_once('SupplierQuoteItemCommentPeer.php');

	  //creamos el comentario relacionado a la actualizacion
	  $commentParams = array();
	  $commentParams['supplierQuoteItemComment']['price'] = $supplierquoteItemObj->getPrice();
	  $commentParams['supplierQuoteItemComment']['delivery'] = $supplierquoteItemObj->getDelivery();
	  $commentParams['supplierQuoteItemComment']['comments'] = $params['comments'];
	  if (!empty($params['supplierId'])) {
	  	$commentParams['supplierQuoteItemComment']['supplierId'] = $params['supplierId'];
	  }
	
	  if (!empty($params['userId'])) {
	  	$commentParams['supplierQuoteItemComment']['userId'] = $params['userId'];
	  }
		
	  $comment = SupplierQuoteItemCommentPeer::createComment($commentParams['supplierQuoteItemComment']);
	  $supplierquoteItemObj->addSupplierQuoteItemComment($comment);
	  
      $supplierquoteItemObj->save();

	  $supplierQuote = $supplierquoteItemObj->getSupplierQuote();
	  if ($supplierQuote->getStatus() == SupplierQuote::STATUS_QUOTE_REQUESTED) {
	  	//al fijarle informacion la cotizacion para a parcialmente cotizada	  	
	    $supplierQuote->setStatus(SupplierQuote::STATUS_PARTIALLY_QUOTED);
	    $supplierQuote->save();
	    $supplierQuote->saveCurrentStatusOnHistory();
	
	  }

      return $supplierquoteItemObj;
    } catch (Exception $exp) {
      return false;
    }         
  }

  /**
  * Obtiene la informacion de un supplier quote item.
  *
  * @param int $id id del supplierquoteitem
  * @return array Informacion del supplierquoteitem
  */
  function get($id) {
		$supplierquoteItemObj = SupplierQuoteItemPeer::retrieveByPK($id);
    return $supplierquoteItemObj;
  }


} // SupplierQuoteItemPeer
