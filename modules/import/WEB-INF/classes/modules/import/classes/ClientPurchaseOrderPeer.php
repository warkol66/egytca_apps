<?php

  // include base peer class
  require_once 'import/classes/om/BaseClientPurchaseOrderPeer.php';

  // include object class
  include_once 'import/classes/ClientPurchaseOrder.php';


/**
 * Skeleton subclass for performing query and update operations on the 'import_clientPurchaseOrder' table.
 *
 * Orden de Pedido de Cliente
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class ClientPurchaseOrderPeer extends BaseClientPurchaseOrderPeer {

	private $affiliateId = '';
	private $adminStatus = '';
	private $affiliateStatus = '';

	//nombre de los estados para los clientes
	private $statusNamesAffiliate = array(
								'Ordered' => array(ClientPurchaseOrder::STATUS_ORDERED_TO_SUPPLIER),
							);

							//nombre de los estados para los administradores
	private $statusNamesAdmin = array(
									'Ordered To Supplier' => array(ClientPurchaseOrder::STATUS_ORDERED_TO_SUPPLIER),
								);

	  /**
	   * Devuelve los nombres de los estados del cliente
	   */					
	  public function getStatusNamesAffiliate() {
			return array_keys($this->statusNamesAffiliate);
	  }

	  /**
	   * Devuelve los nombres de los estados del cleinte
	   */					
	  public function getStatusNamesAdmin() {
			return array_keys($this->statusNamesAdmin);
	  }

	  /**
	   * Fija un filtro por supplier
	   * @param Integer $supplierId id de supplier
	   */
	  public function setAffiliateId($affiliateId) {
		$this->affiliateId = $affiliateId;
	  }	

	  /**
	   * Fija un filtro por producto
	   * @param Integer $productId id de producto
	   */
	  public function setProductId($productId) {
		$this->productId = $productId;
	  }

	  /**
	   * Fija un filtro por nombre de producto
	   * @param Integer $productId id de producto
	   */
	  public function setProductName($name) {
		$this->productName = $name;
	  }

	  /**
	   * Fija un filtro por estado de administrador
	   * @param Integer $productId id de producto
	   */
	  public function setAdminStatus($status) {
		$this->adminStatus = $status;
	  }	

	  /**
	   * Fija un filtro por estado de cliente
	   * @param Integer $productId id de producto
	   */
	  public function setAffiliateStatus($status) {
		$this->affiliateStatus = $status;
	  }	

	  /**
	  * Obtiene la cantidad de filas por pagina por defecto en los listado paginados.
	  *
	  * @return int Cantidad de filas por pagina
	  */
	  function getRowsPerPage() {
	    global $system;
	    return $system["config"]["system"]["rowsPerPage"];
	  }

	  /**
	  * Actualiza la informacion de un client order.
	  *
	  * @param array $params Array asociativo con los atributos del objeto
	  * @return boolean true si se actualizo la informacion correctamente, false sino
	  */  
	  function update($params) {
	    try {
	      $clientorderObj = ClientPurchaseOrderPeer::retrieveByPK($params["id"]);    
	      if (empty($clientorderObj))
	        throw new Exception();
	      foreach ($params as $key => $value) {
	        $setMethod = "set".$key;
	        if ( method_exists($clientorderObj,$setMethod) ) {          
	          if (!empty($value))
	            $clientorderObj->$setMethod($value);
	          else
	            $clientorderObj->$setMethod(null);
	        }
	      }
	      $clientorderObj->save();
	      return $clientorderObj;
	    } catch (Exception $exp) {
	      return false;
	    }         
	  }    

		/**
		* Elimina un client order a partir de los valores de la clave.
		*
	  * @param int $id id del clientorder
		*	@return boolean true si se elimino correctamente el clientorder, false sino
		*/
	  function delete($id) {
	  	$clientorderObj = ClientPurchaseOrderPeer::retrieveByPK($id);
	    $clientorderObj->delete();
			return true;
	  }

	  /**
	  * Obtiene la informacion de un client order.
	  *
	  * @param int $id id del clientorder
	  * @return array Informacion del clientorder
	  */
	  function get($id) {
			$clientorderObj = ClientPurchaseOrderPeer::retrieveByPK($id);
	    return $clientorderObj;
	  }

	  /**
	  * Obtiene todos los client orders.
		*
		*	@return array Informacion sobre todos los clientorders
	  */
		function getAll() {
			$cond = new Criteria();
			$alls = ClientPurchaseOrderPeer::doSelect($cond);
			return $alls;
	  }

	  /**
	  * Obtiene todos los client orders paginados.
	  *
	  * @param int $page [optional] Numero de pagina actual
	  * @param int $perPage [optional] Cantidad de filas por pagina
	  *	@return array Informacion sobre todos los clientorders
	  */
	  function getAllPaginated($page=1,$perPage=-1) {  
	    if ($perPage == -1)
	      $perPage = 	ClientPurchaseOrderPeer::getRowsPerPage();
	    if (empty($page))
	      $page = 1;
	    $cond = new Criteria();     
	    $pager = new PropelPager($cond,"ClientPurchaseOrderPeer", "doSelect",$page,$perPage);
	    return $pager;
	   }    


	  /**
	  * Obtiene todos los client orders paginados.
	  *
	  * @param int $page [optional] Numero de pagina actual
	  * @param int $perPage [optional] Cantidad de filas por pagina
	  *	@return array Informacion sobre todos los clientorders
	  */
	  function getAllPaginatedByAffiliate($affiliate,$page=1,$perPage=-1) {

	    if ($perPage == -1)
	      $perPage = 	ClientPurchaseOrderPeer::getRowsPerPage();
	    if (empty($page))
	      $page = 1;
	    $cond = new Criteria();
		$cond->add(ClientPurchaseOrderPeer::AFFILIATEID,$affiliate->getId());
	    $pager = new PropelPager($cond,"ClientPurchaseOrderPeer", "doSelect",$page,$perPage);
	    return $pager;
	   }

	  /**
	  * Obtiene todos los client orders paginados.
	  *
	  * @param int $page [optional] Numero de pagina actual
	  * @param int $perPage [optional] Cantidad de filas por pagina
	  *	@return array Informacion sobre todos los clientorders
	  */
	  function getAllPaginatedByAffiliateFiltered($affiliate,$page=1,$perPage=-1) {

	    if ($perPage == -1)
	      $perPage = 	ClientPurchaseOrderPeer::getRowsPerPage();
	    if (empty($page))
	      $page = 1;
	    $cond = $this->getFilterCriteria();
		$cond->add(ClientPurchaseOrderPeer::AFFILIATEID,$affiliate->getId());
	    $pager = new PropelPager($cond,"ClientPurchaseOrderPeer", "doSelect",$page,$perPage);
	    return $pager;
	   }

		/**
		 * Realiza el procesamiento de un array de status
		 *
		 */
		private function processStatus($criteria,$status) {
			foreach ($status as $stat) {
				if (empty($criterion)) {
					$criterion = $criteria->getNewCriterion(ClientPurchaseOrderPeer::STATUS, $stat, Criteria::EQUAL);
				}
				else {
					$criterion->addOr($criteria->getNewCriterion(ClientPurchaseOrderPeer::STATUS, $stat, Criteria::EQUAL));
				}
			}
			return $criterion;
		}

	  /**
	   * Genera una criteria segun la informacion introducida para filtros
	   * @return Criteria instancia de criteria
	   */
	  private function getFilterCriteria() {
		$criteria = New Criteria();
		$criteria->addJoin(ClientPurchaseOrderPeer::ID,ClientPurchaseOrderItemPeer::CLIENTPURCHASEORDERID,Criteria::LEFT_JOIN);
		$criteria->addJoin(ClientPurchaseOrderItemPeer::PRODUCTID,ProductPeer::ID,Criteria::LEFT_JOIN);

		if (!empty($this->affiliateId)) {
			$criteria->add(ClientPurchaseOrderPeer::AFFILIATEID,$this->affiliateId);
		}


		if (!empty($this->affiliateStatus)) {

			$status = $this->statusNamesAffiliate[$this->affiliateStatus];
			$criteria->add($this->processStatus($criteria,$status));

		}

		if (!empty($this->adminStatus)) {
			$status = $this->statusNamesAdmin[$this->adminStatus];
			$criteria->add($this->processStatus($criteria,$status));
		}

		$criteria->setDistinct();

		return $criteria;
	  }    

	  /**
	  * Obtiene todos los supplier orders paginados aplicando los filtros.
	  *
	  * @param int $page [optional] Numero de pagina actual
	  * @param int $perPage [optional] Cantidad de filas por pagina
	  *	@return array Informacion sobre todos los supplierorders
	  */
	  public function getAllPaginatedFiltered($page=1,$perPage=-1) {  
	    if ($perPage == -1)
	      $perPage = 	ClientPurchaseOrderPeer::getRowsPerPage();
	    if (empty($page))
	      $page = 1;
		$cond = new Criteria();
	    $pager = new PropelPager($cond,"ClientPurchaseOrderPeer","doSelect",$page,$perPage);
	    return $pager;
	   }    	


} // ClientPurchaseOrderPeer
