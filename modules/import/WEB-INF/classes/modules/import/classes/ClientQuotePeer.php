<?php

  // include base peer class
  require_once 'import/classes/om/BaseClientQuotePeer.php';

  // include object class
  include_once 'import/classes/ClientQuote.php';


/**
 * Skeleton subclass for performing query and update operations on the 'import_clientQuote' table.
 *
 * Cotizacion a Cliente
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class ClientQuotePeer extends BaseClientQuotePeer {

  private $affiliateId = '';
  private $productId = '';
  private $adminStatus = '';
  private $affiliateStatus = '';
  private $productName = '';

  //nombre de los estados para los clientes
  private $statusNamesAffiliate = array(
							'New' => array(ClientQuote::STATUS_NEW),
							'In Progress' => array(ClientQuote::STATUS_SUPPLIER_QUOTE_REQUESTED, ClientQuote::STATUS_WAITING_FOR_PRICING),
							'Partially Quoted' => array(ClientQuote::STATUS_PARTIALLY_QUOTED),
							'Quoted' => array(ClientQuote::STATUS_QUOTED)
						);

						//nombre de los estados para los administradores
	private $statusNamesAdmin = array(
								'New' => array(ClientQuote::STATUS_NEW),
								'Quote Requested' => array(ClientQuote::STATUS_SUPPLIER_QUOTE_REQUESTED),
								'Waiting For Pricing' => array(ClientQuote::STATUS_WAITING_FOR_PRICING, ClientQuote::STATUS_PARTIALLY_QUOTED),
								'Quoted' => array(ClientQuote::STATUS_QUOTED)
							);

	public static function getStatusNamesAdmin2() {
		//nombre de los estados para los administradores
		$statusNamesAdmin = array();
		$statusNamesAdmin[ClientQuote::STATUS_NEW] = Common::getTranslation('New','import');
		$statusNamesAdmin[ClientQuote::STATUS_SUPPLIER_QUOTE_REQUESTED] = Common::getTranslation('Quote Requested','import');
		$statusNamesAdmin[ClientQuote::STATUS_WAITING_FOR_PRICING] = Common::getTranslation('Waiting For Pricing','import');
		$statusNamesAdmin[ClientQuote::STATUS_PARTIALLY_QUOTED] = Common::getTranslation('Waiting For Pricing','import');
		$statusNamesAdmin[ClientQuote::STATUS_QUOTED] = Common::getTranslation('Quoted','import');
		$statusNamesAdmin[ClientQuote::STATUS_ACCEPTED] = Common::getTranslation('Accepted','import');
		$statusNamesAdmin[ClientQuote::STATUS_PARTIALLY_ACCEPTED] = Common::getTranslation('Partially Accepted','import');
		$statusNamesAdmin[ClientQuote::STATUS_REJECTED] = Common::getTranslation('Rejected','import');
		return $statusNamesAdmin;		
	} 

	public static function getStatusNamesAffiliate2() {
		//nombre de los estados para los administradores
		$statusNamesAffiliate = array();
		$statusNamesAffiliate[ClientQuote::STATUS_NEW] = Common::getTranslation('New','import');
		$statusNamesAffiliate[ClientQuote::STATUS_SUPPLIER_QUOTE_REQUESTED] = Common::getTranslation('In Progress','import');
		$statusNamesAffiliate[ClientQuote::STATUS_WAITING_FOR_PRICING] = Common::getTranslation('In Progress','import');
		$statusNamesAffiliate[ClientQuote::STATUS_PARTIALLY_QUOTED] = Common::getTranslation('Partially Quoted','import');
		$statusNamesAffiliate[ClientQuote::STATUS_QUOTED] = Common::getTranslation('Quoted','import');
		$statusNamesAffiliate[ClientQuote::STATUS_ACCEPTED] = Common::getTranslation('Accepted','import');
		$statusNamesAffiliate[ClientQuote::STATUS_PARTIALLY_ACCEPTED] = Common::getTranslation('Partially Accepted','import');
		$statusNamesAffiliate[ClientQuote::STATUS_REJECTED] = Common::getTranslation('Rejected','import');
		return $statusNamesAffiliate;		
	} 
	 
  
  /**
   * Devuelve los nombres de los estados del cliente
   */					
  public function getStatusNamesAffiliate() {
		return array_keys($this->statusNamesAffiliate);
  }

  /**
   * Devuelve los nombres de los estados del cleinte
   */					
  public function getStatusNamesAdmin() {
		return array_keys($this->statusNamesAdmin);
  }

  /**
   * Fija un filtro por supplier
   * @param Integer $supplierId id de supplier
   */
  public function setAffiliateId($affiliateId) {
	$this->affiliateId = $affiliateId;
  }	

  /**
   * Fija un filtro por producto
   * @param Integer $productId id de producto
   */
  public function setProductId($productId) {
	$this->productId = $productId;
  }

  /**
   * Fija un filtro por nombre de producto
   * @param Integer $productId id de producto
   */
  public function setProductName($name) {
	$this->productName = $name;
  }

  /**
   * Fija un filtro por estado de administrador
   * @param Integer $productId id de producto
   */
  public function setAdminStatus($status) {
	$this->adminStatus = $status;
  }	

  /**
   * Fija un filtro por estado de cliente
   * @param Integer $productId id de producto
   */
  public function setAffiliateStatus($status) {
	$this->affiliateStatus = $status;
  }	


  /**
  * Obtiene la cantidad de filas por pagina por defecto en los listado paginados.
  *
  * @return int Cantidad de filas por pagina
  */
  function getRowsPerPage() {
    global $system;
    return $system["config"]["system"]["rowsPerPage"];
  }
  

  /**
  * Crea una instancia de ClientQuote. La misma no se persiste en la base de datos.
  * @param array $params Array asociativo con los atributos del objeto
  * @return ClientQuote instance
  */
  function createInstance($params) {
	  $clientquoteObj = new ClientQuote();
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($clientquoteObj,$setMethod) ) {          
          if (!empty($value))
            $clientquoteObj->$setMethod($value);
          else
            $clientquoteObj->$setMethod(null);
        }
      }

	  $clientquoteObj->setCreatedAt(time());
	  $clientquoteObj->setStatus(ClientQuote::STATUS_NEW);
      return $clientquoteObj;
  }

  /**
  * Crea un client quote nuevo y lo persiste.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return boolean true si se creo correctamente, false sino
  */  
  function create($params) {
    try {
      
	  $clientQuoteObject = ClientQuotePeer::createInstance($params);

	  $clientquoteObj->save();
  
	  $clientquoteObj->saveCurrentStatusOnHistory();

      return $clientquoteObj;
    } catch (Exception $exp) {
      return false;
    }         
  }  
  
  /**
  * Actualiza la informacion de un client quote.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return boolean true si se actualizo la informacion correctamente, false sino
  */  
  function update($params) {
    try {
      $clientquoteObj = ClientQuotePeer::retrieveByPK($params["id"]);    
      if (empty($clientquoteObj))
        throw new Exception();
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($clientquoteObj,$setMethod) ) {          
          if (!empty($value))
            $clientquoteObj->$setMethod($value);
          else
            $clientquoteObj->$setMethod(null);
        }
      }
      $clientquoteObj->save();
      return $clientquoteObj;
    } catch (Exception $exp) {
      return false;
    }         
  }    

	/**
	* Elimina un client quote a partir de los valores de la clave.
	*
  * @param int $id id del clientquote
	*	@return boolean true si se elimino correctamente el clientquote, false sino
	*/
  function delete($id) {
  	$clientquoteObj = ClientQuotePeer::retrieveByPK($id);
    $clientquoteObj->delete();
		return true;
  }

  /**
  * Obtiene la informacion de un client quote.
  *
  * @param int $id id del clientquote
  * @return array Informacion del clientquote
  */
  function get($id) {
		$clientquoteObj = ClientQuotePeer::retrieveByPK($id);
    return $clientquoteObj;
  }

  /**
  * Obtiene todos los client quotes.
	*
	*	@return array Informacion sobre todos los clientquotes
  */
	function getAll() {
		$cond = new Criteria();
		$alls = ClientQuotePeer::doSelect($cond);
		return $alls;
  }
  
  /**
  * Obtiene todos los client quotes paginados.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los clientquotes
  */
  function getAllPaginated($page=1,$perPage=-1) {  
    if ($perPage == -1)
      $perPage = 	ClientQuotePeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    $cond = new Criteria();     
    $pager = new PropelPager($cond,"ClientQuotePeer", "doSelect",$page,$perPage);
    return $pager;
   }    


  /**
  * Obtiene todos los client quotes paginados.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los clientquotes
  */
  function getAllPaginatedByAffiliate($affiliate,$page=1,$perPage=-1) {
	
    if ($perPage == -1)
      $perPage = 	ClientQuotePeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    $cond = new Criteria();
	$cond->add(ClientQuotePeer::AFFILIATEID,$affiliate->getId());
    $pager = new PropelPager($cond,"ClientQuotePeer", "doSelect",$page,$perPage);
    return $pager;
   }

  /**
  * Obtiene todos los client quotes paginados.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los clientquotes
  */
  function getAllPaginatedByAffiliateFiltered($affiliate,$page=1,$perPage=-1) {

    if ($perPage == -1)
      $perPage = 	ClientQuotePeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    $cond = $this->getFilterCriteria();
	$cond->add(ClientQuotePeer::AFFILIATEID,$affiliate->getId());
    $pager = new PropelPager($cond,"ClientQuotePeer", "doSelect",$page,$perPage);
    return $pager;
   }

	/**
	 * Realiza el procesamiento de un array de status
	 *
	 */
	private function processStatus($criteria,$status) {
		foreach ($status as $stat) {
			if (empty($criterion)) {
				$criterion = $criteria->getNewCriterion(ClientQuotePeer::STATUS, $stat, Criteria::EQUAL);
			}
			else {
				$criterion->addOr($criteria->getNewCriterion(ClientQuotePeer::STATUS, $stat, Criteria::EQUAL));
			}
		}
		return $criterion;
	}

  /**
   * Genera una criteria segun la informacion introducida para filtros
   * @return Criteria instancia de criteria
   */
  private function getFilterCriteria() {
	$criteria = New Criteria();
	$criteria->addJoin(ClientQuotePeer::ID,ClientQuoteItemPeer::CLIENTQUOTEID,Criteria::LEFT_JOIN);
	$criteria->addJoin(ClientQuoteItemPeer::PRODUCTID,ProductPeer::ID,Criteria::LEFT_JOIN);

	if (!empty($this->affiliateId)) {
		$criteria->add(ClientQuotePeer::AFFILIATEID,$this->affiliateId);
	}
	
	if (!empty($this->productId)) {
		$criteria->add(ClientQuoteItemPeer::PRODUCTID,$this->productId);
	}

	if (!empty($this->productName)) {
		$criterionProduct = $criteria->add(ProductPeer::NAME,"%".$this->productName."%",Criteria::LIKE);
		$criterionProduct->addOr(ProductPeer::DESCRIPTION,"%".$this->productName."%",Criteria::LIKE);
		$criteria->add($criterionProduct);
		$criteria->setIgnoreCase(true);
}

	if (!empty($this->affiliateStatus)) {

		$status = $this->statusNamesAffiliate[$this->affiliateStatus];
		$criteria->add($this->processStatus($criteria,$status));

	}

	if (!empty($this->adminStatus)) {
		$status = $this->statusNamesAdmin[$this->adminStatus];
		$criteria->add($this->processStatus($criteria,$status));
	}
	
	$criteria->setDistinct();
	
	return $criteria;
  }    

  /**
  * Obtiene todos los supplier quotes paginados aplicando los filtros.
  *
  * @param int $page [optional] Numero de pagina actual
  * @param int $perPage [optional] Cantidad de filas por pagina
  *	@return array Informacion sobre todos los supplierquotes
  */
  public function getAllPaginatedFiltered($page=1,$perPage=-1) {  
    if ($perPage == -1)
      $perPage = 	SupplierQuotePeer::getRowsPerPage();
    if (empty($page))
      $page = 1;
    $cond = $this->getFilterCriteria();   
    $pager = new PropelPager($cond,"ClientQuotePeer","doSelect",$page,$perPage);
    return $pager;
   }    	


} // ClientQuotePeer
