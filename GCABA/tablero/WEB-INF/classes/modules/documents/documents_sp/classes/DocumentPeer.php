<?php
/**
* DocumentPeer
*
*  Action utilizado para mostrar los documentos existentes dentro de una categoría
* 
* @package documents
*/

// The object class
require_once("Document.php");

/** 
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [10/23/06 13:29:49]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package infocivica
 */
class DocumentPeer {

	//string para busqueda por palabra
	var $filename = '';
	var $description = '';
	var $startDate = '';
	var $endDate = '';
	var $categoryId = '';
	var $moduleId = '';
	var $title = '';

	var $db;
	var $tablePrefix;

   /**
  	* Constructor de la clase Modulos
  	*
  	* Inicializa los atributos de la clase
  	*/
	function DocumentPeer() {
	//opcional dependiendo de la configuracion que se quiera
		global $tablePrefix;
		$this->tablePrefix = $tablePrefix;
		$this->tablePrefix .= 'documents_';
		$this->db = new DBConnection();

	}

	/**
	 * Determina una descripcion para el filtro.
	 * @param string cadena de busqueda
	 */
	function setDescription($string) {
		$this->description = $string;
		return true;
	}

	/**
	 * Determina nombre de archivo para el filtro.
	 * @param string cadena de busqueda
	 */
	function setFilename($string) {
		$this->filename = $string;
		return true;
	}


	/**
	 * Determina una fecha de inicio para busqueda de fechas.
	 * @param string YYYY-MM-DD
	 */	
	function setStartDate($startDate) {
		$this->startDate = $startDate;
	}

	/**
	 * Determina una fecha de finalizacion para busqueda de fechas.
	 * @param string YYYY-MM-DD
	 */
	function setEndDate($endDate) {
		$this->endDate = $endDate;
	}

	/**
	 * Determina una categoria para busqueda por categoria.
	 * @param Category instancia de Category
	 */	
	function setCategory($category) {
		$this->categoryId = $category->getId();
	}
	
	/**
	 * Determina un modulo para busqueda por modulo.
	 * @param Module instancia de Module
	 */
	function setModuleId($moduleId) {
		$this->moduleId = $moduleId;
	}

	/**
	 * Determina un titulo para una busqueda por titulo.
	 * @param string titulo
	 */
	function setTitle($title) {
		$this->title = $title;
	}	

	function getAll() {
	
		$db = $this->db;
		$result = array();	
		$query = "SELECT * FROM ". $this->tablePrefix . "document";
		$db->query($query);
		$result = $db->recordset2Array();
		$resultObject = array();
		foreach ($result as $record) {
			array_push($resultObject,DocumentPeer::convertRecordToDocumentInstance($record));
		}
		
		return $resultObject;
    }

	
	/**
	 * Crea una nueva instancia del documento y lleva a cabo la carga de la misma
	 *
	 * @param upload de php
	 * @param string descripcion
	 * @param string fecha
	 * @param string tipo de archivo
	 * @param string password
	 * @return false en caso de error, o la instancia creada.
	 */
	function create($file,$title,$description,$date,$categoryId,$password) {

		$realFilename = $file['name'];
		
		$document = new Document();
		$document->setDate(date('Y-m-d'));
		$document->setTitle($title);
		$document->setCategoryid($categoryId);
		$document->setDescription($description);
		$document->setDocumentdate($date);
		$document->setRealfilename($realFilename);

		if(!empty($password)){
			$document->setPassword(md5($password."ASD"));
		}

		$createdDocument = $document->save();

		global $system;
		$documentsPath = $system['config']['documents']['documentsPath'];

		copy($file['tmp_name'],$documentsPath . '/' . $createdDocument->getId());
		
		return $createdDocument;
	}



	function getArchive($id) {

		   	$db = $this->db;
		 	$result = array();
			$query = "SELECT * FROM ". $this->tablePrefix . "document WHERE id = '$id'";
			$db->query($query);
			$db->next_record();
			$record = $db->Record;
			return DocumentPeer::convertRecordToDocumentInstance($record);
			
	}



	function getDocumentsType($id) {

		$db = $this->db;
		$result = array();	
		$query = "SELECT * FROM ". $this->tablePrefix . "document WHERE categoryId = '" . $id ."'";
		$db->query($query);
		$result = $db->recordset2Array();
		$resultObject = array();
		foreach ($result as $record) {
			array_push($resultObject,DocumentPeer::convertRecordToDocumentInstance($record));
		}
		
		return $resultObject;

	}


	function updateDocument($id,$title,$description,$document_date,$category,$password,$file) {
		
		if (!empty($file)) {
			$realFilename = $file['name'];
		}

		$obj = DocumentPeer::getArchive($id);
		$obj->setTitle($title);
		$obj->setDescription($description);
		$obj->setDocumentdate($document_date);
		$obj->setCategoryid($category);
		if (!empty($realFilename))
			$obj->setRealfilename($realFilename);
		if (!empty($password)){
			$obj->setPassword(md5($password."ASD"));
		}
			else $obj->setPassword();
		$obj->save();
	
		if (!empty($file)) {
			
			global $system;
			$documentsPath = $system['config']['documents']['documentsPath'];

			//eliminamos el anterior
			unlink($documentsPath . '/' . $obj->getId());
			//copiamos el nuevo
			copy($file['tmp_name'],$documentsPath . '/' . $obj->getId());			
			
		}		
		
		return true;
	}

	function updateDocumentWithoutPass($id,$description,$document_date,$category) {
		$obj = DocumentPeer::get($id);
		$obj->setDescription($description);
		$obj->setDocumentdate($document_date);
		$obj->setCategoryid($category);
		$obj->save();
		return;
	}


	/**
	 * Eliminacion de documentos
	 * @param $id integer identificador de documentos
	 *
	 */
	function delete($id) {
		
		global $system;
		$documentsPath = $system['config']['documents']['documentsPath'];
			
		$document = DocumentPeer::getArchive($id);
		
		//si no se puede eliminar se lanza una excepcion
		unlink($documentsPath . '/' . $document->getId());
		
		//se elimina la entrada en la base de datos
		return $document->delete();			
	

	
	}


		/** 
		 * Indica si se utilizan las categorias globales o solo las del modulo documentos
		 * @return boolean
		 */
		 function usesGlobalCategories() {

			global $system;
			
			if ($system['config']['documents']['useGlobalCategories']['value'] == 'NO')
				return false;				

			return true;

			
		}
		
		/**
		 * Obtiene los modulos que poseen documentos en el sistema.
		 *
		 */
		 function getModulesWithDocuments() {
			
			require_once('ModulePeer.php');
	
			//solo el modulo documentos tiene categorias.
			
			$db = $this->db;
			$result = array();
			global $tablePrefix;
			$query = "SELECT * FROM ". $tablePrefix . "modules_module WHERE name = 'documents'";
			$db->query($query);
			$result = $db->recordset2Array();
			$resultObject = array();
			foreach ($result as $record) {
				array_push($resultObject,ModulePeer::convertRecordToModuleInstance($record));
			}
			return $resultObject;
		}
		
		/**
		 * Crea una criteria a partir de los filtros indicados en la clase peer.
		 *
		 */
		function getFilterCriteria() {
			
			$sql = "SELECT * FROM ". $this->tablePrefix . "document";
			$where = '';

/*			
			if (!empty($this->description)) {
				$criteria->add(DocumentPeer::DESCRIPTION,"%" . $this->description . "%",Criteria::LIKE);
			}
			
			if (!empty($this->startDate) && !empty($this->endDate)) {
				$criterion = $criteria->getNewCriterion(DocumentPeer::DOCUMENT_DATE, $this->startDate, Criteria::GREATER_EQUAL);
				$criterion->addAnd($criteria->getNewCriterion(DocumentPeer::DOCUMENT_DATE, $this->endDate, Criteria::LESS_EQUAL));
				
				$criteria->add($criterion);
			}
			else {
			
				if (!empty($this->startDate))
					$criteria->add(DocumentPeer::DOCUMENT_DATE,$this->startDate,Criteria::GREATER_EQUAL);
				
				if (!empty($this->endDate))
					$criteria->add(DocumentPeer::DOCUMENT_DATE,$this->endDate,Criteria::LESS_EQUAL);

			}
*/			
			if (!empty($this->categoryId)) {
				
				if ($where == '')
					$where = ' WHERE ';
				else
					$where .= ' AND ';
								
				$where .=  "categoryId = '$this->categoryId'";
				
			}
/*			
			if (!empty($this->module)) {
				$module = $this->module;
				echo $module;
				$criteria->addJoin(DocumentPeer::CATEGORYID,CategoryPeer::ID,Criteria::LEFT_JOIN);
				$criteria->add(CategoryPeer::MODULE,$module->getName());
			}
			
			if (!empty($this->title)) {
				$criteria->add(DocumentPeer::TITLE,"%" . $this->title . "%",Criteria::LIKE);
			}
			
			if (!empty($this->filename)) {
				$criteria->add(DocumentPeer::REALFILENAME,"%" . $this->filename . "%",Criteria::LIKE);
			}			
*/
			if ($where != '');
				$sql .= $where;
			return $sql;

		}
		
		/**
		 * Obtiene los documentos de una categoria
		 * @param Category instancia de categoria.
		 *
		 */
		 function getAllFiltered($category) {
			
			$db = $this->db;
			$result = array();
			$query = $this->getFilterCriteria();
			$db->query($query);
			$result = $db->recordset2Array();
			$resultObject = array();
			foreach ($result as $record) {
				array_push($resultObject,DocumentPeer::convertRecordToDocumentInstance($record));
			}

			return $resultObject;
		
		}
		
		/**
		 * Devuelve la cantidad de documentos que hay en una categoria
		 * @return integer
		 */
		 function getDocumentsByCategoryCount($category) {
			
			return count($this->getDocumentsType($category->getId()));

		}
		
		 function getDocumentsWithoutCategoryCount() {
			
			return count($this->getDocumentsType(0));
		}		
		
		/**
		 * Obtiene todos los documentos sin categoria
		 * @return array de instancias de Document
		 */
		 function getAllWithoutCategory() {

			return $this->getDocumentsType(0);

		}
		
		function convertRecordToDocumentInstance($record) {
			
			$document = new Document();
			$document->setId($record['id']);
			$document->setRealFilename($record['realFilename']);
			$document->setCategoryId($record['categoryId']);
			$document->setDate($record['date']);
			$document->setDescription($record['description']);
			$document->setDocumentDate($record['document_date']);
			$document->setPassword($record['password']);
			$document->setTitle($record['title']);
			
			return $document;
			
		}
		
		function getGeneralPublicParentCategories() {
			require_once('CategoryPeer.php');
			$db = $this->db;
			$result = array();
			global $tablePrefix;
			$query = "SELECT * FROM ". $tablePrefix . "categories_category WHERE active = '1' AND parentId = '0' AND module = '' and isPublic = '1'";
			$db->query($query);
			$result = $db->recordset2Array();
			$resultObject = array();
			foreach ($result as $record) {
				array_push($resultObject,CategoryPeer::convertRecordToCategoryInstance($record));
			}

			return $resultObject;
			
		}

}
