<?php

require_once 'import/classes/ClientPurchaseOrderHistoryPeer.php';
require_once 'import/classes/om/BaseClientPurchaseOrder.php';


/**
 * Skeleton subclass for representing a row from the 'import_clientPurchaseOrder' table.
 *
 * Orden de Pedido de Cliente
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class ClientPurchaseOrder extends BaseClientPurchaseOrder {
	
	const STATUS_ORDERED_TO_SUPPLIER = 1;
	const STATUS_IN_PRODUCTION = 2;
	const STATUS_WAITING_FOR_TRANSPORT = 3;
	const STATUS_SHIPPED = 4;
	const STATUS_ARRIVED = 5;
	const STATUS_DELIVERED_TO_CLIENT = 6;

	//nombre de los estados para los clientes
	private $statusNamesClient = array(
								ClientPurchaseOrder::STATUS_ORDERED_TO_SUPPLIER => 'Ordered',
							);

	//nombre de los estados para los administradores
	private $statusNamesAdmin = array(
								ClientPurchaseOrder::STATUS_ORDERED_TO_SUPPLIER => 'Ordered To Supplier',
							);
	

	/**
	 * Devuelve un array con los nombres de los distintos mensajes de status para el afiliado/cliente
	 * @return array
	 */	
	public function getStatusNamesClient() {
		return $this->statusNamesClient;
	}

	/**
	 * Devuelve un array con los nombres de los distintos mensajes de status para el adminstrador
	 * @return array
	 */
	public function getStatusNamesAdmin() {
		return $this->statusNamesAdmin;
	}	
	
	/**
	 * Saves the current status of the instance in his history
	 * @return boolean
	 */
	public function saveCurrentStatusOnHistory() {
		
		require_once('ClientPurchaseOrderHistory.php');
		
		try {

			$clientPurchaseOrderHistory = new ClientPurchaseOrderHistory();
			$clientPurchaseOrderHistory->setClientPurchaseOrder($this);
			$clientPurchaseOrderHistory->setStatus($this->getStatus());
			$clientPurchaseOrderHistory->setCreatedAt(time());
			$clientPurchaseOrderHistory->save();
			
		} catch (Exception $e) {
			return false;
		}
		
		return true;
	}
	
	/**
	 * Devuelve el nombre del status actual de la cotizacion para un administrador
	 * @return string
	 */
	public function getStatusNameAdmin() {
		return $this->statusNamesAdmin[$this->getStatus()];
	}

	/**
	 * Devuelve el nombre del status actual de la cotizacion para un cliente
	 * @return string
	 */
	public function getStatusNameClient() {
		return $this->statusNamesClient[$this->getStatus()];
	}	
	
	/**
	 * Indicates if the quote has a certain Product
	 * @param $product Product
	 * @return boolean
	 */
	public function getAffiliateName() {
		
		$affiliateId = $this->getAffiliateId();
		$affiliate = AffiliatePeer::get($affiliateId);
		return $affiliate->getName();
		
	}
	

} // ClientPurchaseOrder
