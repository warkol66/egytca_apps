<?php

require_once 'import/classes/om/BaseProductRequest.php';


define('PRODUCTREQUEST_NEW',0);
define('PRODUCTREQUEST_PENDING',1);
define('PRODUCTREQUEST_QUOTED',2);
define('PRODUCTREQUEST_WAITING',3);
define('PRODUCTREQUEST_ACCEPTED',4);
define('PRODUCTREQUEST_REJECTED',5);

/**
 * Skeleton subclass for representing a row from the 'productRequest' table.
 *
 * Products of each request
 *
 * This class was autogenerated by Propel on:
 *
 * 12/05/07 13:19:20
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class ProductRequest extends BaseProductRequest {

	var $statusMessage = array(PRODUCTREQUEST_NEW=>'New',
				PRODUCTREQUEST_PENDING=>'Pending',
				PRODUCTREQUEST_QUOTED=>'Quoted',
				PRODUCTREQUEST_WAITING=>'Waiting',
				PRODUCTREQUEST_ACCEPTED=>'Accepted',
				PRODUCTREQUEST_REJECTED=>'Rejected'

	);

	/**
	 * Modifica el status de la instancia y su timestamp de status
	 * @param $status integer
	 * 
	 */
	function setStatus($status) {
		//agregamos el guardado del timestamp de cambio de status
		$datetime = time();
		$this->setTimestampStatus($datetime);
		return parent::setStatus($status);
		
	}

	/**
	 * Modifica el Precio de Supplier de la instancia y su timestamp de Precio de Supplier
	 * @param $status integer
	 * 
	 */
	function setPriceSupplier($price) {
		//agregamos el guardado del timestamp de cambio de precio de supplier
		$datetime = time();
		$this->setTimestampPriceSupplier($datetime);
		return parent::setPriceSupplier($price);
	}

	/**
	 * Modifica el Precio de Client de la instancia y su timestamp de Precio de Client
	 * @param $status integer
	 * 
	 */
	function setPriceClient($price) {
		//agregamos el guardado del timestamp de cambio de precio de client
		$datetime = time();
		$this->setTimestampPriceClient($datetime);
		return parent::setPriceClient($price);

	}


	/**
	 * Devuelve el nombre del estado actual en que se encuentra el ProductRequest
	 *
         * @returns string nombre del estado en que se encuentra el product request
	 */
	function getStatus() {
		$status = parent::getStatus();
		return $this->statusMessage[$status];
	}

	/**
	 * Pone al ProductRequest en estado NEW
	 * @return devuelve true si se pudo realizar el cambio de estado, false sino.
	 */
	function setNewStatus() {
		$this->setStatus(PRODUCTREQUEST_NEW);
	}

	/**
	 * Pone al ProductRequest en estado PENDING
	 * @return devuelve true si se pudo realizar el cambio de estado, false sino.
	 */
	function setPendingStatus() {
		//regla de negocio
		// El Product Request debe estar en estado New, y debe tener un supplier asignado
		$supplierId = $this->getSupplierId();		
		if ( $this->isNew() && !empty($supplierId) ) {
			$this->setStatus(PRODUCTREQUEST_PENDING);
			return true;
		}

		return false;
	}
	

	/**
	 * Pone al ProductRequest en estado QUOTED
	 * @return devuelve true si se pudo realizar el cambio de estado, false sino.
	 */
	function setQuotedStatus() {
		//regla de negocio
		//para pasar a este estado la orden debe estar en estado pendiente
		//y debe tener asignado un incoterm, un precio de supplier y un puerto
		$incotermId = $this->getIncotermId();
		$portId = $this->getPortId();
		$priceSupplier = $this->getPriceSupplier();
		if ($this->isPending() && (!empty($incotermId) && !empty($portId) && !empty($priceSupplier))) {
			$this->setStatus(PRODUCTREQUEST_QUOTED);
			return true;
		}
		
		return false;
	}

	/**
	 * Pone al ProductRequest en estado WAITING
	 * @return devuelve true si se pudo realizar el cambio de estado, false sino.
	 */
	function setWaitingStatus() {
		//regla de negocio
		//para pasar a este estado la orden de debe estar en estado quoted y debe haberse fijado un precio de cliente
		$priceClient = $this->getPriceClient();
		if ($this->isQuoted() && !empty($priceClient)) {
			$this->setStatus(PRODUCTREQUEST_WAITING);
			return true;
		}
		
		return false;
	}

	/**
	 * Pone al ProductRequest en estado ACCEPTED
	 * @return devuelve true si se pudo realizar el cambio de estado, false sino.
	 */
	function setAcceptedStatus() {
		//regla de negocio
		//para pasar a este estado la orden debe estar en estado waiting		
		if ($this->isWaiting()) {
			$this->setStatus(PRODUCTREQUEST_ACCEPTED);
			return true;
		}
		return false;
	}

	/**
	 * Pone al ProductRequest en estado REJECTED
	 * @return devuelve true si se pudo realizar el cambio de estado, false sino.
	 */
	function setRejectedStatus() {
		//regla de negocio
		//para pasar a este estado la orden debe estar en estado waiting		
		if ($this->isWaiting()) {		
			$this->setStatus(PRODUCTREQUEST_REJECTED);
			return true;
		}
	
		return false;
		
	}

	/**
	 * indica si el estado del Product Request es New
	 * @returns boolean true si si tiene ese estado, false en caso contrario
	 */
	function isNew() {
		$status = parent::getStatus();
		return (PRODUCTREQUEST_NEW == $status);
	}

	/**
	 * indica si el estado del Product Request es Quoted
	 * @returns boolean true si si tiene ese estado, false en caso contrario
	 */
	function isQuoted() {
	 
		$status = parent::getStatus();
		return (PRODUCTREQUEST_QUOTED == $status);

	}

	/**
	 * indica si el estado del Product Request es Pending
	 * @returns boolean true si si tiene ese estado, false en caso contrario
	 */
	function isPending() {
	 
		$status = parent::getStatus();
		return (PRODUCTREQUEST_PENDING == $status);

	}

	/**
	 * indica si el estado del Product Request es Waiting
	 * @returns boolean true si si tiene ese estado, false en caso contrario
	 */
	function isWaiting() {
	 
		$status = parent::getStatus();
		return (PRODUCTREQUEST_WAITING == $status);

	}

	/**
	 * indica si el estado del Product Request es Accepted
	 * @returns boolean true si si tiene ese estado, false en caso contrario
	 */
	function isAccepted() {
	 
		$status = parent::getStatus();
		return (PRODUCTREQUEST_ACCEPTED == $status);

	}
	
	/**
	 * indica si el estado del Product Request es Rejected
	 * @returns boolean true si si tiene ese estado, false en caso contrario
	 */
	function isRejected() {
	 
		$status = parent::getStatus();
		return (PRODUCTREQUEST_REJECTED == $status);

	}


} // ProductRequest
