<?php

require_once 'import/classes/om/BaseProduct.php';


/**
 * Skeleton subclass for representing a row from the 'product' table.
 *
 * Productos
 *
 * This class was autogenerated by Propel on:
 *
 * 12/05/07 13:19:20
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class Product extends BaseProduct {

	const STATUS_INACTIVE = 0;
	const STATUS_ACTIVE = 1;
	const STATUS_SUPPLIER_ACTIVE = 2;


	/**
	 * Redefinimos delete para evitar que se haga borrado real cuando 
	 * se elimina desde el objeto. sin usar la clase peer.
	 */
	function delete (PropelPDO $con = null) {
		$this->setStatus(Product::STATUS_INACTIVE);
		$this->save();
	}
	
	public function getProductSupplier() {
		
		require_once('ProductSupplierPeer.php');
		
		$criteria = new Criteria();
		$criteria->add(ProductSupplierPeer::PRODUCTID,$this->getId());
		$result = ProductSupplierPeer::doSelect($criteria);
		return $result[0];
		
	}
	
	public function getSupplier() {

		$relationship = $this->getProductSupplier();

		if (empty($relationship)) {
			return false;
		}

		$supplier = $relationship->getSupplier();
				
		return $supplier;
	}
	
	public function getSupplierId() {
		$supplier = $this->getSupplier();
		
		if (empty($supplier)) {
			return false;
		}
		
		return $supplier->getId();
	}
	
	public function getSupplierProductCode() {

		$relationship = $this->getProductSupplier();

		if (empty($relationship)) {
			return false;
		}

		$code = $relationship->getCode();
	
		return $code;
		
	}
	
	/**
	 * Obtiene aquellos productos que este producto ha reemplazado en 
	 * ordenes de proveedor
	 */
	public function getProductsThatHasReplaced() {
		
		$criteria = New Criteria();
		$criteria->add(SupplierQuoteItemPeer::PRODUCTID,$this->getId());
		$criteria->add(SupplierQuoteItemPeer::REPLACEDPRODUCTID,0,Criteria::GREATER_THAN);
		
		$items = SupplierQuoteItemPeer::doSelect($criteria);
		
		$products = array();
		foreach ($items as $item) {
			$products[] = $item->getReplacedProduct();
		}
		
		return $products;
		
	}
	
	/**
	 * Realiza una actualizacion del codigo de un producto.
	 * Si llegara a ser un producto dado de alta por un proveedor, el mismo lo pasa a activo en el sistema.
	 * @param $code string codigo de producto a actualizar sobre la instancia
	 * @return boolean
	 */
	public function updateCode($code) {

		try {
			$this->setCode($code);
			$this->setStatus(Product::STATUS_ACTIVE);
			$this->save();
		} catch (PropelException $e) {
			return false;
		}
		
		return true;
	}

} // Product
