<?php

  // include base peer class
  require_once 'import/classes/om/BaseClientQuoteItemPeer.php';

  // include object class
  include_once 'import/classes/ClientQuoteItem.php';


/**
 * Skeleton subclass for performing query and update operations on the 'import_clientQuoteItem' table.
 *
 * Elemento de Cotizacion Cliente
 *
 * This class was autogenerated by Propel on:
 *
 * Mon Feb  2 17:02:11 2009
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    anmaga
 */
class ClientQuoteItemPeer extends BaseClientQuoteItemPeer {

  /**
  * Crea un client quote item nuevo sin persistirlo en la base de datos
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return ClientQuoteItem instance
  */
  function createInstance($params) {

     $clientquoteItemObj = new ClientQuoteItem();
     foreach ($params as $key => $value) {
       $setMethod = "set".$key;
       if ( method_exists($clientquoteItemObj,$setMethod) ) {          
         if (!empty($value))
           $clientquoteItemObj->$setMethod($value);
         else
           $clientquoteItemObj->$setMethod(null);
       }
     }
	 return $clientquoteItemObj;
	
  }
  

  /**
  * Crea un client quote item nuevo y lo persiste.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return ClientQuoteItem instance
  */  
  function create($params) {
    try {
      $clientquoteItemObj = ClientQuoteItemPeer::createInstance($params);
      $clientquoteItemObj->save();
      return $clientquoteItemObj;
    } catch (Exception $exp) {
      return false;
    }         
  }

  /**
  * Actualiza un client quote item nuevo.
  *
  * @param array $params Array asociativo con los atributos del objeto
  * @return ClientQuote creado, false sino
  */  
  function update($params) {
    try {
      $clientquoteItemObj = ClientQuoteItemPeer::get($params['id']);
      foreach ($params as $key => $value) {
        $setMethod = "set".$key;
        if ( method_exists($clientquoteItemObj,$setMethod) ) {          
          if (!empty($value))
            $clientquoteItemObj->$setMethod($value);
          else
            $clientquoteItemObj->$setMethod(null);
        }
      }

	  if ($params['price'] != '') {
	  	//se ha fijado un precio de un item
	    $clientQuote = $clientquoteItemObj->getClientQuote();
		if ($clientQuote->getStatus() == ClientQuote::STATUS_WAITING_FOR_PRICING) {
			$clientQuote->setStatus(ClientQuote::STATUS_PARTIALLY_QUOTED);
			$clientQuote->save();
			$clientQuote->saveCurrentStatusOnHistory();			
		}
	  }
		
      $clientquoteItemObj->save();
      return $clientquoteItemObj;
    } catch (Exception $exp) {
      return false;
    }         
  }

  /**
  * Obtiene la informacion de un client quote item.
  *
  * @param int $id id del clientquote
  * @return array Informacion del clientquote
  */
  function get($id) {
		$clientquoteItemObj = ClientQuoteItemPeer::retrieveByPK($id);
    return $clientquoteItemObj;
  }



} // ClientQuoteItemPeer
